{"version":3,"file":"formiks-FormikMultiRadio-stories.fa1e8dbb.iframe.bundle.js","mappings":";;;;AA2BA;;;;;;;;;ACkGA;;;;AAKA","sources":["webpack://@mtes-mct/monitor-ui__root/./.storybook/components/Output.tsx","webpack://@mtes-mct/monitor-ui__root/./.storybook/components/StoryDecorator.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport type OutputProps = {\n  label?: string\n  value?: any\n}\nexport function Output({ label = 'Output', value }: OutputProps) {\n  // eslint-disable-next-line no-null/no-null\n  const valueAsString = useMemo(() => (value === undefined ? 'undefined' : JSON.stringify(value, null, 2)), [value])\n\n  return (\n    <>\n      <Title>{`${label} (type: ${typeof value === 'object' ? value.constructor.name : typeof value})`}</Title>\n      <Value className=\"mui-output\" data-cy={label}>\n        {valueAsString}\n      </Value>\n    </>\n  )\n}\n\nconst Title = styled.h3`\n  font-size: 100%;\n  line-height: 1.3846;\n  margin: 16px 0 8px 0;\n`\n\nconst Value = styled.pre`\n  background-color: #1e1e1e;\n  color: #ffffff;\n  margin: 0;\n  padding: 8px;\n`\n","import { forwardRef, useEffect, useImperativeHandle, useMemo, useState, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { GlobalDecoratorWrapper } from './GlobalDecorator'\nimport { Accent, Button, NewWindow, Size, THEME, useForceUpdate, useNewWindow, NewWindowContext } from '../../src'\n\nimport type { NewWindowContextValue } from '../../src'\nimport type { StoryContext, StoryFn, StrictArgs } from '@storybook/react'\nimport type { ForwardedRef, MutableRefObject } from 'react'\n\nexport function generateStoryDecorator({\n  fixedWidth,\n  hasDarkMode = false,\n  withNewWindowButton = false\n}: {\n  fixedWidth?: number\n  hasDarkMode?: boolean\n  withNewWindowButton?: boolean\n} = {}) {\n  return function StoryDecorator(Story: StoryFn, { args }: StoryContext) {\n    const newWindowRef = useRef() as MutableRefObject<HTMLDivElement>\n\n    const [isNewWindowOpen, setIsNewWindowOpen] = useState(false)\n\n    const style = useMemo(\n      () => ({\n        ...(fixedWidth\n          ? {\n              width: `${fixedWidth}px`\n            }\n          : {}),\n        ...(hasDarkMode\n          ? {\n              backgroundColor: args.isLight ? THEME.color.gainsboro : THEME.color.white\n            }\n          : {})\n      }),\n      [args.isLight]\n    )\n\n    const { forceUpdate } = useForceUpdate()\n\n    useEffect(() => {\n      forceUpdate()\n    }, [forceUpdate])\n\n    return (\n      <>\n        {withNewWindowButton && (\n          <NewWindowButtonBox>\n            <Button accent={Accent.SECONDARY} onClick={() => setIsNewWindowOpen(true)} size={Size.SMALL}>\n              OPEN IN NEW WINDOW\n            </Button>\n          </NewWindowButtonBox>\n        )}\n\n        {!isNewWindowOpen && (\n          <StoryBox style={style}>\n            <Story />\n          </StoryBox>\n        )}\n\n        {withNewWindowButton && isNewWindowOpen && (\n          <NewWindow features={{ height: 600, width: 800 }} onUnload={() => setIsNewWindowOpen(false)}>\n            <NewWindowStoryWrapper ref={newWindowRef} Story={Story} storyArgs={args} />\n          </NewWindow>\n        )}\n      </>\n    )\n  }\n}\n\nfunction NewWindowStoryWrapperWithRef(\n  { Story, storyArgs }: { Story: StoryFn; storyArgs: StrictArgs },\n  ref: ForwardedRef<HTMLDivElement | null>\n) {\n  // eslint-disable-next-line no-null/no-null\n  const wrapperRef = useRef<HTMLDivElement | null>(null)\n\n  const [isFirstRender, setIsFirstRender] = useState(true)\n\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(ref, () => wrapperRef.current)\n\n  const newWindowContextProviderValue: NewWindowContextValue = useMemo(\n    () => ({\n      newWindowContainerRef: wrapperRef.current\n        ? (wrapperRef as MutableRefObject<HTMLDivElement>)\n        : { current: window.document.createElement('div') }\n    }),\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isFirstRender]\n  )\n\n  useEffect(() => {\n    setIsFirstRender(false)\n  }, [])\n\n  return (\n    <NewWindowStoryBox ref={wrapperRef}>\n      {!isFirstRender && (\n        <NewWindowContext.Provider value={newWindowContextProviderValue}>\n          <GlobalDecoratorWrapper>\n            <NewWindowStory Story={Story} storyArgs={storyArgs} />\n          </GlobalDecoratorWrapper>\n        </NewWindowContext.Provider>\n      )}\n    </NewWindowStoryBox>\n  )\n}\n\nconst NewWindowStoryWrapper = forwardRef(NewWindowStoryWrapperWithRef)\n\nfunction NewWindowStory({ Story, storyArgs }: { Story: StoryFn; storyArgs: StrictArgs }) {\n  const { newWindowContainerRef } = useNewWindow()\n\n  return <Story args={{ ...storyArgs, baseContainer: newWindowContainerRef.current }} />\n}\n\nconst StoryBox = styled.div`\n  height: 100%;\n  padding: 16px;\n  width: 100%;\n`\n\nconst NewWindowButtonBox = styled.div`\n  position: fixed;\n  right: 16px;\n  top: 16px;\n`\nconst NewWindowStoryBox = styled.div`\n  height: 100%;\n  padding: 16px;\n  width: 100%;\n`\n"],"names":[],"sourceRoot":""}