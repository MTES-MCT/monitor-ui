import{a_ as d,a$ as t,j as a}from"./index-0nDB5Zzz.js";import{r as p}from"./index-CBqU2yxZ.js";import{O as f}from"./Output-Sfj1QWTd.js";import{M as c,A as e}from"./constants-D7cOJi0A.js";import{g as b}from"./generateStoryDecorator-jcZX8bPx.js";import"./_baseClone-CBkhujLI.js";import"./isPlainObject-Dl0da9pc.js";import"./_commonjsHelpers-BosuxZz1.js";import"./mapValues-CZXAhdHD.js";import"./index-Ch9hqOxJ.js";import"./toNumber-BGTiNFDU.js";import"./StoryBox-BZYZ6up0.js";import"./fr_FR-CrxT__co.js";const P={...c,title:"Fields/CoordinatesInput",component:d,argTypes:{coordinatesFormat:{control:"inline-radio",options:t},disabled:e.OPTIONAL_BOOLEAN,error:e.OPTIONAL_STRING,isErrorMessageHidden:e.OPTIONAL_BOOLEAN,isLabelHidden:e.OPTIONAL_BOOLEAN,isLight:e.OPTIONAL_BOOLEAN,isTransparent:e.OPTIONAL_BOOLEAN,isUndefinedWhenDisabled:e.OPTIONAL_BOOLEAN,readOnly:e.OPTIONAL_BOOLEAN},args:{coordinatesFormat:t.DEGREES_MINUTES_SECONDS,defaultValue:void 0,disabled:!1,error:"",isErrorMessageHidden:!1,isLabelHidden:!1,isLight:!1,isTransparent:!1,isUndefinedWhenDisabled:!1,label:"A coordinates input",name:"myCoordinatesInput",readOnly:!1},decorators:[b({box:{width:640},withBackgroundButton:!0})]};function n(u){const[r,m]=p.useState("∅");return a.jsxs(a.Fragment,{children:[a.jsx(d,{...u,onChange:l=>m(l)}),r!=="∅"&&a.jsx(f,{value:r})]})}n.__docgenInfo={description:"",methods:[],displayName:"_CoordinatesInput",props:{className:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:""},coordinatesFormat:{required:!0,tsType:{name:"CoordinatesFormat"},description:""},defaultValue:{required:!1,tsType:{name:"union",raw:"Coordinates | undefined",elements:[{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},{name:"undefined"}]},description:""},disabled:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},error:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:""},isErrorMessageHidden:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isLabelHidden:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isLight:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isTransparent:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isUndefinedWhenDisabled:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},label:{required:!0,tsType:{name:"string"},description:""},name:{required:!0,tsType:{name:"string"},description:""},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(nextCoordinates: Coordinates | undefined, coordinates: Coordinates | undefined) => Promisable<void>",signature:{arguments:[{type:{name:"union",raw:"Coordinates | undefined",elements:[{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},{name:"undefined"}]},name:"nextCoordinates"},{type:{name:"union",raw:"Coordinates | undefined",elements:[{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},{name:"undefined"}]},name:"coordinates"}],return:{name:"Promisable",elements:[{name:"void"}],raw:"Promisable<void>"}}},description:""},readOnly:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},style:{required:!1,tsType:{name:"union",raw:"CSSProperties | undefined",elements:[{name:"CSSProperties"},{name:"undefined"}]},description:""}}};var i,o,s;n.parameters={...n.parameters,docs:{...(i=n.parameters)==null?void 0:i.docs,source:{originalSource:`function _CoordinatesInput(props: CoordinatesInputProps) {
  const [outputValue, setOutputValue] = useState<number[] | undefined | '∅'>('∅');
  return <>
      <CoordinatesInput {...props} onChange={nextCoordinates => setOutputValue(nextCoordinates)} />

      {outputValue !== '∅' && <Output value={outputValue} />}
    </>;
}`,...(s=(o=n.parameters)==null?void 0:o.docs)==null?void 0:s.source}}};const S=["_CoordinatesInput"];export{n as _CoordinatesInput,S as __namedExportsOrder,P as default};
