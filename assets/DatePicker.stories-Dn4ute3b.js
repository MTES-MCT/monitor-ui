import{b0 as r,j as n}from"./index-D3QtTYcx.js";import{r as l}from"./index-CBqU2yxZ.js";import{D as m}from"./Description-DZAWpIjg.js";import{O as p}from"./Output-CQAZDSvb.js";import{M as f,A as e}from"./constants-VGTGrGmu.js";import{g as c}from"./generateStoryDecorator-DsoMrMh3.js";import"./_baseClone-CBkhujLI.js";import"./isPlainObject-Dl0da9pc.js";import"./_commonjsHelpers-BosuxZz1.js";import"./mapValues-CZXAhdHD.js";import"./index-Ch9hqOxJ.js";import"./toNumber-BGTiNFDU.js";import"./StoryBox-DeLdszCZ.js";import"./fr_FR-BAq5VERt.js";const I={...f,title:"Fields/DatePicker",component:r,argTypes:{baseContainer:e.OPTIONAL_BASE_CONTAINER,defaultValue:{control:"date",table:{type:{detail:"If `isStringDate` is `true`, `string | undefined`, otherwise `Date | undefined`.",summary:"Date | string | undefined"}}},disabled:e.OPTIONAL_BOOLEAN,error:e.OPTIONAL_STRING,isCompact:e.OPTIONAL_BOOLEAN,isEndDate:e.OPTIONAL_BOOLEAN,isErrorMessageHidden:e.OPTIONAL_BOOLEAN,isLabelHidden:e.OPTIONAL_BOOLEAN,isHistorical:e.OPTIONAL_BOOLEAN,isLight:e.OPTIONAL_BOOLEAN,isStringDate:e.OPTIONAL_BOOLEAN,isTransparent:e.OPTIONAL_BOOLEAN,isUndefinedWhenDisabled:e.OPTIONAL_BOOLEAN,minutesRange:e.OPTIONAL_NUMBER,onChange:{...e.NO_CONTROL_INPUT,table:{type:{detail:"If `isStringDate` is `true`, `string | undefined`, otherwise `Date | undefined`.",summary:"(nextValue: Date | undefined) => void | (nextValue: string | undefined) => void"}}},readOnly:e.OPTIONAL_BOOLEAN,withTime:e.OPTIONAL_BOOLEAN},args:{baseContainer:void 0,defaultValue:void 0,disabled:!1,error:"",isCompact:!1,isEndDate:!1,isErrorMessageHidden:!1,isHistorical:!1,isLabelHidden:!1,isLight:!1,isStringDate:!1,isTransparent:!1,isUndefinedWhenDisabled:!1,label:"A date picker",name:"myDatePicker",readOnly:!1,withTime:!0},decorators:[c({box:{width:640},withBackgroundButton:!0,withNewWindowButton:!0})]};function a(d){const[o,u]=l.useState();return n.jsxs(n.Fragment,{children:[n.jsx(m,{children:n.jsx("p",{children:"Dates are always picked and displayed in UTC, ignoring you local time zone."})}),n.jsx(r,{...d,onChange:u}),n.jsx(p,{value:o})]})}a.__docgenInfo={description:"",methods:[],displayName:"_DatePicker",props:{baseContainer:{required:!1,tsType:{name:"union",raw:"Document | HTMLDivElement | null | undefined",elements:[{name:"Document"},{name:"HTMLDivElement"},{name:"null"},{name:"undefined"}]},description:"Used to pass something else than `window.document` as a base container to attach global events listeners."},defaultValue:{required:!1,tsType:{name:"union",raw:"Date | string | undefined",elements:[{name:"Date"},{name:"string"},{name:"undefined"}]},description:""},disabled:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},error:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:""},isCompact:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isEndDate:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:"Set the default time to the end (instead of start) of the day when picking/entering a date."},isErrorMessageHidden:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isHistorical:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:"Only allow past dates until today."},isLabelHidden:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isLight:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isStringDate:{required:!1,tsType:{name:"union",raw:"false | undefined",elements:[{name:"literal",value:"false"},{name:"undefined"}]},description:""},isTransparent:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isUndefinedWhenDisabled:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},label:{required:!0,tsType:{name:"string"},description:""},minutesRange:{required:!1,tsType:{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},description:"Range of minutes used to generate the time picker list.\n\n@example\n`15` would produce a list with `..., 10:45, 11:00, 11:15, ...`."},name:{required:!0,tsType:{name:"string"},description:""},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(nextValue: Date | undefined) => Promisable<void>",signature:{arguments:[{type:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},name:"nextValue"}],return:{name:"Promisable",elements:[{name:"void"}],raw:"Promisable<void>"}}},description:`Called each time the date range picker is changed to a new valid value.

@param nextValue - A utcized date to be used as is to interact with the API.`},readOnly:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},withTime:{required:!1,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""}},composes:["Omit"]};var i,t,s;a.parameters={...a.parameters,docs:{...(i=a.parameters)==null?void 0:i.docs,source:{originalSource:`function _DatePicker(props: DatePickerWithDateDateProps) {
  const [outputValue, setOutputValue] = useState<Date | string>();
  return <>
      <Description>
        <p>Dates are always picked and displayed in UTC, ignoring you local time zone.</p>
      </Description>

      <DatePicker {...props} onChange={setOutputValue} />

      <Output value={outputValue} />
    </>;
}`,...(s=(t=a.parameters)==null?void 0:t.docs)==null?void 0:s.source}}};const q=["_DatePicker"];export{a as _DatePicker,q as __namedExportsOrder,I as default};
