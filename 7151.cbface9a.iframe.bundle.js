/*! For license information please see 7151.cbface9a.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_mtes_mct_monitor_ui_root=self.webpackChunk_mtes_mct_monitor_ui_root||[]).push([[7151],{"./node_modules/ky/distribution/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{ZP:()=>distribution});class HTTPError extends Error{constructor(response,request,options){const status=`${response.status||0===response.status?response.status:""} ${response.statusText||""}`.trim();super(`Request failed with ${status?`status code ${status}`:"an unknown error"}`),Object.defineProperty(this,"response",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name="HTTPError",this.response=response,this.request=request,this.options=options}}class TimeoutError extends Error{constructor(request){super("Request timed out"),Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name="TimeoutError",this.request=request}}const isObject=value=>null!==value&&"object"==typeof value,validateAndMerge=(...sources)=>{for(const source of sources)if((!isObject(source)||Array.isArray(source))&&void 0!==source)throw new TypeError("The `options` argument must be an object");return deepMerge({},...sources)},mergeHeaders=(source1={},source2={})=>{const result=new globalThis.Headers(source1),isHeadersInstance=source2 instanceof globalThis.Headers,source=new globalThis.Headers(source2);for(const[key,value]of source.entries())isHeadersInstance&&"undefined"===value||void 0===value?result.delete(key):result.set(key,value);return result},deepMerge=(...sources)=>{let returnValue={},headers={};for(const source of sources)if(Array.isArray(source))Array.isArray(returnValue)||(returnValue=[]),returnValue=[...returnValue,...source];else if(isObject(source)){for(let[key,value]of Object.entries(source))isObject(value)&&key in returnValue&&(value=deepMerge(returnValue[key],value)),returnValue={...returnValue,[key]:value};isObject(source.headers)&&(headers=mergeHeaders(headers,source.headers),returnValue.headers=headers)}return returnValue},supportsRequestStreams=(()=>{let duplexAccessed=!1,hasContentType=!1;const supportsReadableStream="function"==typeof globalThis.ReadableStream,supportsRequest="function"==typeof globalThis.Request;return supportsReadableStream&&supportsRequest&&(hasContentType=new globalThis.Request("https://a.com",{body:new globalThis.ReadableStream,method:"POST",get duplex(){return duplexAccessed=!0,"half"}}).headers.has("Content-Type")),duplexAccessed&&!hasContentType})(),supportsAbortController="function"==typeof globalThis.AbortController,supportsResponseStreams="function"==typeof globalThis.ReadableStream,supportsFormData="function"==typeof globalThis.FormData,requestMethods=["get","post","put","patch","head","delete"],responseTypes={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},stop=Symbol("stop"),normalizeRequestMethod=input=>requestMethods.includes(input)?input.toUpperCase():input,retryAfterStatusCodes=[413,429,503],defaultRetryOptions={limit:2,methods:["get","put","head","delete","options","trace"],statusCodes:[408,413,429,500,502,503,504],afterStatusCodes:retryAfterStatusCodes,maxRetryAfter:Number.POSITIVE_INFINITY,backoffLimit:Number.POSITIVE_INFINITY},normalizeRetryOptions=(retry={})=>{if("number"==typeof retry)return{...defaultRetryOptions,limit:retry};if(retry.methods&&!Array.isArray(retry.methods))throw new Error("retry.methods must be an array");if(retry.statusCodes&&!Array.isArray(retry.statusCodes))throw new Error("retry.statusCodes must be an array");return{...defaultRetryOptions,...retry,afterStatusCodes:retryAfterStatusCodes}};const isDomExceptionSupported=Boolean(globalThis.DOMException);function composeAbortError(signal){if(isDomExceptionSupported)return new DOMException(signal?.reason??"The operation was aborted.","AbortError");const error=new Error(signal?.reason??"The operation was aborted.");return error.name="AbortError",error}class Ky{static create(input,options){const ky=new Ky(input,options),fn=async()=>{if(ky._options.timeout>2147483647)throw new RangeError("The `timeout` option cannot be greater than 2147483647");await Promise.resolve();let response=await ky._fetch();for(const hook of ky._options.hooks.afterResponse){const modifiedResponse=await hook(ky.request,ky._options,ky._decorateResponse(response.clone()));modifiedResponse instanceof globalThis.Response&&(response=modifiedResponse)}if(ky._decorateResponse(response),!response.ok&&ky._options.throwHttpErrors){let error=new HTTPError(response,ky.request,ky._options);for(const hook of ky._options.hooks.beforeError)error=await hook(error);throw error}if(ky._options.onDownloadProgress){if("function"!=typeof ky._options.onDownloadProgress)throw new TypeError("The `onDownloadProgress` option must be a function");if(!supportsResponseStreams)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return ky._stream(response.clone(),ky._options.onDownloadProgress)}return response},result=ky._options.retry.methods.includes(ky.request.method.toLowerCase())?ky._retry(fn):fn();for(const[type,mimeType]of Object.entries(responseTypes))result[type]=async()=>{ky.request.headers.set("accept",ky.request.headers.get("accept")||mimeType);const response=(await result).clone();if("json"===type){if(204===response.status)return"";if(0===(await response.clone().arrayBuffer()).byteLength)return"";if(options.parseJson)return options.parseJson(await response.text())}return response[type]()};return result}constructor(input,options={}){if(Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"abortController",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_retryCount",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"_input",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._input=input,this._options={credentials:this._input.credentials||"same-origin",...options,headers:mergeHeaders(this._input.headers,options.headers),hooks:deepMerge({beforeRequest:[],beforeRetry:[],beforeError:[],afterResponse:[]},options.hooks),method:normalizeRequestMethod(options.method??this._input.method),prefixUrl:String(options.prefixUrl||""),retry:normalizeRetryOptions(options.retry),throwHttpErrors:!1!==options.throwHttpErrors,timeout:void 0===options.timeout?1e4:options.timeout,fetch:options.fetch??globalThis.fetch.bind(globalThis)},"string"!=typeof this._input&&!(this._input instanceof URL||this._input instanceof globalThis.Request))throw new TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&"string"==typeof this._input){if(this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(supportsAbortController){if(this.abortController=new globalThis.AbortController,this._options.signal){const originalSignal=this._options.signal;this._options.signal.addEventListener("abort",(()=>{this.abortController.abort(originalSignal.reason)}))}this._options.signal=this.abortController.signal}if(supportsRequestStreams&&(this._options.duplex="half"),this.request=new globalThis.Request(this._input,this._options),this._options.searchParams){const searchParams="?"+("string"==typeof this._options.searchParams?this._options.searchParams.replace(/^\?/,""):new URLSearchParams(this._options.searchParams).toString()),url=this.request.url.replace(/(?:\?.*?)?(?=#|$)/,searchParams);!(supportsFormData&&this._options.body instanceof globalThis.FormData||this._options.body instanceof URLSearchParams)||this._options.headers&&this._options.headers["content-type"]||this.request.headers.delete("content-type"),this.request=new globalThis.Request(new globalThis.Request(url,{...this.request}),this._options)}void 0!==this._options.json&&(this._options.body=JSON.stringify(this._options.json),this.request.headers.set("content-type",this._options.headers.get("content-type")??"application/json"),this.request=new globalThis.Request(this.request,{body:this._options.body}))}_calculateRetryDelay(error){if(this._retryCount++,this._retryCount<this._options.retry.limit&&!(error instanceof TimeoutError)){if(error instanceof HTTPError){if(!this._options.retry.statusCodes.includes(error.response.status))return 0;const retryAfter=error.response.headers.get("Retry-After");if(retryAfter&&this._options.retry.afterStatusCodes.includes(error.response.status)){let after=Number(retryAfter);return Number.isNaN(after)?after=Date.parse(retryAfter)-Date.now():after*=1e3,void 0!==this._options.retry.maxRetryAfter&&after>this._options.retry.maxRetryAfter?0:after}if(413===error.response.status)return 0}const BACKOFF_FACTOR=.3;return Math.min(this._options.retry.backoffLimit,BACKOFF_FACTOR*2**(this._retryCount-1)*1e3)}return 0}_decorateResponse(response){return this._options.parseJson&&(response.json=async()=>this._options.parseJson(await response.text())),response}async _retry(fn){try{return await fn()}catch(error){const ms=Math.min(this._calculateRetryDelay(error),2147483647);if(0!==ms&&this._retryCount>0){await async function delay(ms,{signal}){return new Promise(((resolve,reject)=>{if(signal){if(signal.aborted)return void reject(composeAbortError(signal));signal.addEventListener("abort",handleAbort,{once:!0})}function handleAbort(){reject(composeAbortError(signal)),clearTimeout(timeoutId)}const timeoutId=setTimeout((()=>{signal?.removeEventListener("abort",handleAbort),resolve()}),ms)}))}(ms,{signal:this._options.signal});for(const hook of this._options.hooks.beforeRetry){if(await hook({request:this.request,options:this._options,error,retryCount:this._retryCount})===stop)return}return this._retry(fn)}throw error}}async _fetch(){for(const hook of this._options.hooks.beforeRequest){const result=await hook(this.request,this._options);if(result instanceof Request){this.request=result;break}if(result instanceof Response)return result}return!1===this._options.timeout?this._options.fetch(this.request.clone()):async function timeout(request,abortController,options){return new Promise(((resolve,reject)=>{const timeoutId=setTimeout((()=>{abortController&&abortController.abort(),reject(new TimeoutError(request))}),options.timeout);options.fetch(request).then(resolve).catch(reject).then((()=>{clearTimeout(timeoutId)}))}))}(this.request.clone(),this.abortController,this._options)}_stream(response,onDownloadProgress){const totalBytes=Number(response.headers.get("content-length"))||0;let transferredBytes=0;return 204===response.status?(onDownloadProgress&&onDownloadProgress({percent:1,totalBytes,transferredBytes},new Uint8Array),new globalThis.Response(null,{status:response.status,statusText:response.statusText,headers:response.headers})):new globalThis.Response(new globalThis.ReadableStream({async start(controller){const reader=response.body.getReader();onDownloadProgress&&onDownloadProgress({percent:0,transferredBytes:0,totalBytes},new Uint8Array),await async function read(){const{done,value}=await reader.read();if(done)controller.close();else{if(onDownloadProgress){transferredBytes+=value.byteLength;onDownloadProgress({percent:0===totalBytes?0:transferredBytes/totalBytes,transferredBytes,totalBytes},value)}controller.enqueue(value),await read()}}()}}),{status:response.status,statusText:response.statusText,headers:response.headers})}}const createInstance=defaults=>{const ky=(input,options)=>Ky.create(input,validateAndMerge(defaults,options));for(const method of requestMethods)ky[method]=(input,options)=>Ky.create(input,validateAndMerge(defaults,options,{method}));return ky.create=newDefaults=>createInstance(validateAndMerge(newDefaults)),ky.extend=newDefaults=>createInstance(validateAndMerge(defaults,newDefaults)),ky.stop=stop,ky},distribution=createInstance()}}]);