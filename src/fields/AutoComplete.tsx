import ky from 'ky'
import { useCallback, useMemo, useState } from 'react'
import { AutoComplete as RsuiteAutoComplete } from 'rsuite'
import styled from 'styled-components'

import { Field } from '../elements/Field'
import { Label } from '../elements/Label'

import type { Option } from '../types'
import type { AutoCompleteProps as RsuiteAutoCompleteProps } from 'rsuite'
import type { Promisable } from 'type-fest'

export type AutoCompleteProps = Omit<
  RsuiteAutoCompleteProps,
  'as' | 'data' | 'id' | 'onChange' | 'onSelect' | 'value'
> & {
  isLabelHidden?: boolean
  isLight?: boolean
  label: string
  name: string
  onChange?: (nextValue: string | undefined) => Promisable<void>
  onQuery?: (nextQuery: string | undefined) => Promisable<void>
  options?: Option[]
  queryMap?: (record: Record<string, any>) => Option
  queryUrl?: string
}
export function AutoComplete({
  isLabelHidden,
  isLight = false,
  label,
  onChange,
  onQuery,
  options,
  queryMap,
  queryUrl,
  ...originalProps
}: AutoCompleteProps) {
  const [autoGeneratedOptions, setAutoGeneratedOptions] = useState<Option[]>([])

  const controlledOptions = useMemo(() => options ?? autoGeneratedOptions, [autoGeneratedOptions, options])
  const key = useMemo(
    () => `${originalProps.name}-${JSON.stringify(originalProps.defaultValue)}`,
    [originalProps.defaultValue, originalProps.name]
  )

  const handleChange = useCallback(
    async (nextQuery: string) => {
      // console.log(nextQuery)
      // console.log(nextQuery.length)

      if (queryUrl && queryMap) {
        const url = queryUrl.replace('%s', nextQuery)
        const rawData: Record<string, any>[] = await ky.get(url).json()
        const nextData = rawData.map(queryMap)

        setAutoGeneratedOptions(nextData)
      }

      const normalizedNextQuery = nextQuery && nextQuery.trim().length ? nextQuery : undefined

      if (onChange && !normalizedNextQuery) {
        onChange(undefined)
      }

      if (onQuery) {
        onQuery(normalizedNextQuery)
      }
    },
    [onChange, onQuery, queryMap, queryUrl]
  )

  const handleSelect = useCallback(
    (nextValue: string) => {
      if (!onChange) {
        return
      }

      onChange(nextValue)
    },
    [onChange]
  )

  return (
    <Field>
      <Label htmlFor={originalProps.name} isHidden={isLabelHidden}>
        {label}
      </Label>

      <StyledAutoComplete
        key={key}
        $isLight={isLight}
        data={controlledOptions}
        id={originalProps.name}
        onChange={handleChange}
        onSelect={handleSelect}
        {...originalProps}
      />
    </Field>
  )
}

const StyledAutoComplete = styled(RsuiteAutoComplete)<{
  $isLight: boolean
}>`
  font-size: 13px;

  > input {
    background-color: ${p => (p.$isLight ? p.theme.color.white : p.theme.color.gainsboro)};
    border: 0;
    font-size: 13px;
    width: 100%;
  }
`
